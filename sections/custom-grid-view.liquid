{%- style -%}
  .section-{{ section.id }}-padding {
    padding-top: {{ section.settings.padding_top | times: 0.75 | round: 0 }}px;
    padding-bottom: {{ section.settings.padding_bottom | times: 0.75 | round: 0 }}px;
  }
  @media screen and (min-width: 750px) {
    .section-{{ section.id }}-padding {
      padding-top: {{ section.settings.padding_top }}px;
      padding-bottom: {{ section.settings.padding_bottom }}px;
    }
  }
  .hidden { display: none; }
  .product-popup {
    position: fixed;
    top: 0; left: 0;
    width: 100%; height: 100%;
    background: rgba(0, 0, 0, 0.5);
    display: flex; justify-content: center; align-items: center;
  }
  .popup-content {
    background: white;
    padding: 20px;
    width: 400px;
    text-align: center;
    position: relative;
  }
  .close-popup {
    position: absolute;
    top: 10px; right: 15px;
    cursor: pointer;
    font-size: 24px;
  }
  .color-variants {
    display: flex; gap: 10px; margin: 10px 0;
  }
  .color-pill {
    width: 40px; height: 40px;
    border-radius: 20px;
    cursor: pointer;
    display: flex;
    align-items: center;
    justify-content: center;
    border: 2px solid transparent;
    transition: border 0.3s ease;
  }
  .color-pill.selected {
    border: 2px solid black;
  }
  .product-info img{
        width: 100%;
  }
{%- endstyle -%}

<div class="section-{{ section.id }}-padding">
  <div class="{{ section.settings.section-checkbox }}">
    <div class="custom-section-product">
      <div class="custom-section-text">
        <h2>{{ section.settings['section-heading-text'] }}</h2>
      </div>
      <div class="custom-product-grid" id="section-{{ section.id }}">
        {% for block in section.blocks %}
          {% style %}
            #section-{{ section.id }} #block-{{ block.id }} .open-popup {
              position: absolute;
              top: {{ block.settings.position_top}}%;
              right: {{ block.settings.position_right }}%;
            }
          {% endstyle %}

          {% assign product = all_products[block.settings['custom-product']] %}

          {% for image in product.images %}
            <div class="product-img-wrapper" id="block-{{ block.id }}">
              {{ image.src | image_url: width: 433, height: 444 | image_tag: class: 'custom-product-img' }}
              <button class="open-popup">
                <span class="svg-wrapper">{{ 'icon-plus-custom.svg' | inline_asset_content }}</span>
              </button>
              {% comment %}
                <img src="{{ image.src | product_img_url: 'grande' }}">
                {{ product.title }}
                {{ product.price | money_without_trailing_zeros }}
                {{ product.description }}
              {% endcomment %}
            </div>
          {% endfor %}
        {% endfor %}
      </div>

      {% comment %}
        popup start here
      {% endcomment %}
      <div class="">
        {% render 'custom-pop-up' %}
      </div>
    </div>
  </div>
</div>

<!-- JavaScript -->
<!--
  <script>
    document.addEventListener("DOMContentLoaded", function() {
      const popup = document.querySelector(".product-popup");
      const openPopupBtn = document.querySelector(".open-popup");
      const closePopupBtn = document.querySelector(".close-popup");
      const addToCartBtn = document.querySelector(".add-to-cart");
      const colorPills = document.querySelectorAll(".color-pill");
      const sizeSelect = document.querySelector("#size-select");

      let selectedColor = "";

      // Open Popup
      openPopupBtn.addEventListener("click", function() {
        popup.classList.remove("hidden");
      });

      // Close Popup
      closePopupBtn.addEventListener("click", function() {
        popup.classList.add("hidden");
      });

      // Select Color
      colorPills.forEach(pill => {
        pill.addEventListener("click", function() {
          colorPills.forEach(p => p.classList.remove("selected"));
          this.classList.add("selected");
          selectedColor = this.getAttribute("data-color");
        });
      });

      // Find the Correct Variant Based on Selected Color and Size
      function findVariantId(productVariants, selectedColor, selectedSize) {
        let variantId = null;
        productVariants.forEach(variant => {
          if (variant.option1 === selectedColor && variant.option2 === selectedSize) {
            variantId = variant.id;
          }
        });
        return variantId;
      }

      // Add to Cart Function
      addToCartBtn.addEventListener("click", function() {
        let productId = addToCartBtn.dataset.productId;
        let selectedSize = sizeSelect.value;

        if (!selectedColor || !selectedSize) {
          alert("Please select both color and size.");
          return;
        }

        fetch(/products/${productId}.json)
          .then(response => response.json())
          .then(data => {
            let productVariants = data.product.variants;
            let variantId = findVariantId(productVariants, selectedColor, selectedSize);

            if (!variantId) {
              alert("Invalid selection.");
              return;
            }

            // Add to Cart API Call
            fetch('/cart/add.js', {
              method: 'POST',
              headers: { 'Content-Type': 'application/json' },
              body: JSON.stringify({ quantity: 1, id: variantId })
            })
            .then(response => response.json())
            .then(data => {
              alert("Product added to cart!");

              // Redirect to Cart Page
              window.location.href = "/cart";

              // Update Cart Drawer (if enabled)
              fetch('/cart.js')
                .then(response => response.json())
                .then(cartData => {
                  if (document.querySelector("cart-drawer")) {
                    document.querySelector("cart-drawer").dispatchEvent(new Event("cart:updated"));
                  }
                });
            });
          });
      });
    });
  </script>
-->
{% schema %}
{
  "name": "custom grid view",
  "class": "custom-grid-view",
  "settings": [
    {
      "type": "richtext",
      "id": "section-heading-text",
      "label": "Heading",
    },
    {
      "type": "select",
      "id": "section-checkbox",
      "label": "Layout",
      "options": [
        {
          "label": "Full Width",
          "value": "full-width",
        },
        {
          "label": "Page Width",
          "value": "page-width",
        },
      ],
      "default":"page-width"
    },
    {
      "type": "header",
      "content": "t:sections.all.padding.section_padding_heading"
    },
    {
      "type": "range",
      "id": "padding_top",
      "min": 0,
      "max": 100,
      "step": 1,
      "unit": "px",
      "label": "t:sections.all.padding.padding_top",
      "default": 40
    },
    {
      "type": "range",
      "id": "padding_bottom",
      "min": 0,
      "max": 100,
      "step": 1,
      "unit": "px",
      "label": "t:sections.all.padding.padding_bottom",
      "default": 52
    },
  ],
  "blocks": [
    {
      "type": "custom-product",
      "name": "custom product",
      "settings": [
        {
          "type": "product",
          "id": "custom-product",
          "label": "Product"
        },
        {
          "type": "header",
          "content": "Button Position"
        },
        {
          "type": "range",
          "id": "position_top",
          "min": 0,
          "max": 100,
          "step": 1,
          "unit": "%",
          "label": "Position Top",
          "default": 40
        },
        {
          "type": "range",
          "id": "position_right",
          "min": 0,
          "max": 100,
          "step": 1,
          "unit": "%",
          "label": "Position Right",
          "default": 52
        }
      ],
    },
  ],
  "presets": [
    {
      "name": "custom grid view",
    }
  ],
}
{% endschema %}
